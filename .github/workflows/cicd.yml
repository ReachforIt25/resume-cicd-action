name: buil push and deploy image

on:
      
    push:
      branches:
        - "main"
    pull_request:
      branches: [main]

permissions:
    id-token: write
    contents: read

env:
    AWS_REGION: us-east-1
    AWS_ROLE:  ${{ secrets.AWS_ACTION_ROLE }}  
    ECR_REPO_NAME: dev            
    IMAGE_TAG: ${{github.run_number}}
    

jobs:
    build:
        runs-on: ubuntu-latest   # this is a shared runner / github runner
        steps:
          - name: clone repo
            uses: actions/checkout@v3

          - name: Configure AWS credentials using OIDC
            uses: aws-actions/configure-aws-credentials@v1
            with:
              
              role-to-assume: ${{ env.AWS_ROLE}} # OICD 
              aws-region: ${{ env.AWS_REGION }}

          - name: login to ecr
            uses: aws-actions/amazon-ecr-login@v1
            id: ecr-login
          - name: build and tag image
            id: build-and-push
            run: |
               
                docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env.IMAGE_TAG}} .
               
          - name: scan the image using trivy for vulnerabilities
            uses: aquasecurity/trivy-action@master
            with:
              image-ref: "${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}"  # Scans the built image
              format: "table"
              exit-code: "0"
              severity: "CRITICAL,HIGH"



          - name: push image to ecr
            run:  docker push ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env. IMAGE_TAG}}

          - name: store image in github env
            run: echo "Image=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPO_NAME}}:${{ env. IMAGE_TAG}}" >> $Github_ENV

    # deploy: 
    #   runs-on: ubuntu-latest
    #   needs: Build
    #   steps:
      
 




  






